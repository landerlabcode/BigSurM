(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     25414,        594]
NotebookOptionsPosition[     23161,        547]
NotebookOutlinePosition[     23554,        563]
CellTagsIndexPosition[     23511,        560]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Subclustering with BigSur", "Chapter",
 CellChangeTimes->{{3.906417467745303*^9, 
  3.9064174739743757`*^9}},ExpressionUUID->"9794167f-21eb-475d-b132-\
4b57a02f97e2"],

Cell[CellGroupData[{

Cell["Feature Selection ", "Section",
 CellChangeTimes->{{3.906421514801627*^9, 
  3.906421520633245*^9}},ExpressionUUID->"c430fcf9-2419-43d6-98a1-\
9b093af54ca1"],

Cell[CellGroupData[{

Cell["Features using modified corrected Fano factors", "Subsubsection",
 CellChangeTimes->{{3.906460653363405*^9, 3.906460658700001*^9}, {
  3.906461332629282*^9, 
  3.906461347711194*^9}},ExpressionUUID->"56148ecc-37b5-4f88-81c2-\
bc264f3c40a2"],

Cell["\<\
BigSur automatically calculates the modified corrected Fano factors for all \
genes in the matpac that is used as input.  The Fano factors are saved as a \
list in a file whose name ends with \
\[OpenCurlyDoubleQuote]modified_corrected_Fano factors.mx\
\[CloseCurlyDoubleQuote]; the pvalues are saved as a list in a file whose \
name ends with \[OpenCurlyDoubleQuote]fanopvalues.mx\[CloseCurlyDoubleQuote]. \
 Note that the values stored are in the form of -log10(pvalue).  The ordering \
of the list matches the ordering of gene names in the second component of the \
matpac.  

Determination of which pvalues are statistically significant is typically \
done using the Benjamini Hochberg algorithm, code for which is part of the \
BigSur package.  Note the log-transformed pvalues need to be restored to \
fractional values (range 0 to 1)  before application of the algorithm.  

After identifying a threshold pvalue for feature selection, the number of \
features may be further reduced by setting a threshold for the modified \
corrected Fano factor, typically a value in the range of 1.5 to 2.0, or \
greater.  Choice of a larger value implies that one is looking to cluster \
based on larger gene expression differences, as might be appropriate for \
distinct cell types; choice of smaller number would be more appropriate for \
distinguishing among related cell states.   \
\>", "Text",
 CellChangeTimes->{{3.906460662128029*^9, 3.906460718790093*^9}, {
  3.906460828573929*^9, 
  3.906461314754241*^9}},ExpressionUUID->"eee9da1c-6c70-47fb-be2f-\
b21649340eac"]
}, Closed]],

Cell[CellGroupData[{

Cell["MostStronglyConnected", "Subsubsection",
 CellChangeTimes->{{3.906417970169873*^9, 
  3.906417986724946*^9}},ExpressionUUID->"6f0a5443-c389-4f07-b583-\
e42ddc9f1609"],

Cell["\<\
Feature selection using modified corrected fano factors treats each gene as \
an independent feature, giving each gene equal weight in driving clustering.  \
When gene expression is highly correlated, however, this may place undue \
emphasis on the contributions of certain genes.  For example, if a population \
consists of cell types, some of which are proliferative and some of which are \
not, features associated with proliferation may dominate clustering if there \
a very large number of them (as is often the case), potentially overwhelming \
the contributions of smaller groups of genes associated with functions of \
greater interest.  

One way to deal with this is to use BigSur to identify correlated gene \
communities first, and then choose to use a fixed number of genes from a \
particular set of communities as features.  Choosing communities that are \
anti-correlated with each other can be particularly helpful, as they often \
define important cell type differences.  Starting from well chosen \
communities, one can often achieve very good clustering using only 100 genes \
or so as features.  

To decide which genes from a community to use as features, it may be \
advantageous to select those that are involved in the strongest positive \
correlations.  This code produces a fixed number of the most strongly \
connected genes in any community or gene list.  

This starts with a gno and a list of genes.  It finds the \
\[OpenCurlyDoubleQuote]k\[CloseCurlyDoubleQuote] most strongly connected \
genes in that list, by ordering the equivalent PCCs for all interconnections \
(looking at positive correlations only) from highest to lowest, then takes \
whatever number of strongest interconnections produces a gene list of length \
k.  If no list of positively connected genes is at least length k it just \
returns the longest list it can find.  
\
\>", "Text",
 CellChangeTimes->{{3.90641914691648*^9, 3.906419367828496*^9}, {
  3.906421545477024*^9, 3.9064215831659327`*^9}, {3.906461001171946*^9, 
  3.9064610029787607`*^9}, {3.906461319557067*^9, 3.9064613304121447`*^9}, {
  3.9064613653681707`*^9, 3.906461564716775*^9}, {3.906461945316332*^9, 
  3.906461958316596*^9}, {3.906462059637439*^9, 
  3.90646231380274*^9}},ExpressionUUID->"8f015e31-2461-4101-9476-\
6a2786fc23c5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MostStronglyConnected", "[", 
   RowBox[{"gno_", ",", " ", "genelist_", ",", " ", "k_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "gno2", ",", "keyrules", ",", "arrayrules", ",", "  ", "i", ",", " ", 
      "genes"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gno2", "=", 
      RowBox[{"GeneSubsetGNO", "[", 
       RowBox[{
        RowBox[{"TruncateGNO", "[", 
         RowBox[{"gno", ",", " ", "0", ",", " ", 
          RowBox[{"\"\<Positive Only\>\"", "->", " ", "True"}]}], "]"}], ",", 
        
        RowBox[{"Flatten", "[", "genelist", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"keyrules", "=", 
      RowBox[{"Thread", "[", " ", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", 
          RowBox[{"gno2", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "->", " ", 
        RowBox[{"gno2", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"arrayrules", "=", 
      RowBox[{"ReverseSortBy", "[", 
       RowBox[{
        RowBox[{"ArrayRules", "[", 
         RowBox[{"gno2", "[", 
          RowBox[{"[", "3", "]"}], "]"}], "]"}], ",", " ", "Last"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", " ", 
       RowBox[{"i", "<=", 
        RowBox[{"Length", "[", "arrayrules", "]"}]}], ",", " ", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"genes", "=", 
         RowBox[{"Union", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Keys", "[", 
             RowBox[{"Take", "[", 
              RowBox[{"arrayrules", ",", "i"}], "]"}], "]"}], "/.", 
            "keyrules"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "genes", "]"}], ">=", "k"}], ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "genes"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.906417988810327*^9, 3.906418170845447*^9}, {
   3.906418202646605*^9, 3.906418239631173*^9}, {3.906418283151943*^9, 
   3.9064183772443533`*^9}, {3.906418552303556*^9, 3.906418596243383*^9}, {
   3.906418659025498*^9, 3.906418782647134*^9}, {3.906419010079523*^9, 
   3.906419034718335*^9}, 3.906419114494245*^9},
 Background->RGBColor[1, 1, 0],
 CellLabel->
  "In[775]:=",ExpressionUUID->"c83f71a0-d6ab-401d-9be9-c44efc88e8a3"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Clustering", "Section",
 CellChangeTimes->{{3.9064215231383877`*^9, 
  3.906421525927216*^9}},ExpressionUUID->"bf78f765-73ef-4881-928e-\
ae6b729c539c"],

Cell[CellGroupData[{

Cell["SNNGraph2", "Subsubsection",
 CellChangeTimes->{{3.874439418206102*^9, 3.87443942385214*^9}, {
   3.9064196332369967`*^9, 3.906419636627277*^9}, 
   3.9064203315927153`*^9},ExpressionUUID->"a836ff8b-c976-4b33-ae1d-\
9ddb0b98cf47"],

Cell["\<\
This function uses IGraphM, one of the external packages loaded with BigSur, \
for the final plotting step, where it calls, \
\[OpenCurlyDoubleQuote]IGWeightedAdjacencyGraph\[CloseCurlyDoubleQuote]

To use SNNGraph one first decides what features to use for clustering.  This \
may be done by taking the genes with the most significant modified corrected \
Fano factors, or taking genes that are part of particular gene communities.  

The argument mat_ is then derived from the cell-specific residuals matrix \
returned by BigSur, so that the cells are being clustered by their modified, \
corrected Pearson residuals (one could also use a normalized gene expression \
matrix, but artifacts induced by normalization can impede proper clustering). \
 One takes that matrix and from it extracts only those rows that correspond \
to features one has chosen to use, and only those columns to correspond to \
cells one wishes to cluster.  One then transposes that matrix, so that the \
input to SNNGraph has cells as row labels and genes as column labels.  

The parameter k refers to the number of nearest neighbors used in graph \
generation.  Default=20.

The parameter \[OpenCurlyDoubleQuote]cutoff\[CloseCurlyDoubleQuote] sets a \
jaccard similarity cutoff; default = 0.0666667

The parameter npcs refers to the number of Principal components used.  \
Default = 50.

The output of SNNGraph2 is list with two elements.  The first element is the \
list of pcs, the second element is that weighted adjacency matrix.\
\>", "Text",
 CellChangeTimes->{{3.874439425684841*^9, 3.874439453913331*^9}, {
  3.874439639857974*^9, 3.874439647029187*^9}, {3.878505782371719*^9, 
  3.8785058083957777`*^9}, {3.90641944003793*^9, 3.906419551486095*^9}, {
  3.906419606241044*^9, 3.906419624525906*^9}, {3.906419664613824*^9, 
  3.906419982524456*^9}, {3.906420054215312*^9, 3.906420062753557*^9}, {
  3.9064200953991957`*^9, 3.9064201729449377`*^9}, {3.906420258243519*^9, 
  3.906420267002038*^9}, {3.906420941521761*^9, 
  3.906420993245677*^9}},ExpressionUUID->"81bc3d91-513a-4527-99e2-\
c0308f1d24d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SNNGraph2", "[", 
   RowBox[{"mat_", ",", " ", 
    RowBox[{"k_", ":", "20"}], ",", " ", 
    RowBox[{"cutoff_", ":", 
     RowBox[{"N", "[", 
      RowBox[{"1", "/", "15"}], "]"}]}], ",", 
    RowBox[{"npcs_", ":", "50"}]}], "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allpcs", ",", " ", "pcs", ",", "nngraph", ",", " ", "nnmat", ",", 
      "snnmat", ",", "snngraph", ",", " ", "neighborlist", ",", " ", 
      "jaccardmat"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"First", " ", "calculate", " ", "PC", " ", "matrix"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"Dimensions", "[", "mat", "]"}], "]"}], "!=", "2"}], ",", 
       " ", 
       RowBox[{
        RowBox[{"Print", "[", "\"\<matrix has wrong dimensions\>\"", "]"}], 
        ";", 
        RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"allpcs", " ", "=", " ", 
      RowBox[{"PrincipalComponents", "[", 
       RowBox[{
        RowBox[{"N", "[", "mat", "]"}], ",", " ", 
        RowBox[{"Method", "->", "\"\<Correlation\>\""}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pcs", " ", "=", " ", 
      RowBox[{"allpcs", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", 
         RowBox[{"1", ";;", "npcs"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Calculated PC matrix\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Now", " ", "calculate", " ", "k"}], "-", " ", 
       RowBox[{
       "Nearest", " ", "Neighbors", " ", "for", " ", "each", " ", "cell"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"nngraph", "=", " ", 
      RowBox[{"NearestNeighborGraph", "[", 
       RowBox[{"pcs", ",", " ", "k"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"nngraph", " ", "=", " ", 
      RowBox[{"SetProperty", "[", 
       RowBox[{"nngraph", ",", 
        RowBox[{"EdgeWeight", "->", 
         RowBox[{"EuclideanDistance", "@@@", 
          RowBox[{"EdgeList", "[", "nngraph", "]"}]}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nnmat", " ", "=", " ", 
      RowBox[{"WeightedAdjacencyMatrix", "[", "nngraph", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<KNN Finished\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Calculate", " ", "Jaccard", " ", "similarity", " ", "for", " ", "each",
        " ", "cell", " ", "connected", " ", "by", " ", "an", " ", "edge"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"neighborlist", " ", "=", " ", 
      RowBox[{"nnmat", "[", "\"\<AdjacencyLists\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "neighborlist", " ", "gives", " ", "a", " ", "set", " ", "of", " ", 
        "lists", " ", "of", " ", "the", " ", "neighbors", " ", "of", " ", 
        "each", " ", "vertex"}], ",", " ", 
       RowBox[{"in", " ", "order", " ", "by", " ", "vertex"}]}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"jaccardmat", " ", "=", 
      RowBox[{"Outer", "[", 
       RowBox[{
       "JaccardSimilarity", ",", "neighborlist", ",", "neighborlist", ",", 
        "1"}], "]"}]}], ";", " ", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Jaccard scores calculated\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Get", " ", "positions", " ", "greater", " ", "than", " ", "cutoff"}], 
       ";", " ", 
       RowBox[{
       "BoolEval", " ", "makes", " ", "a", " ", "matrix", " ", "with", " ", 
        RowBox[{"1", "'"}], "s", " ", "at", " ", "positions", " ", "where", 
        " ", "jaccardmat", " ", "is", " ", "above", " ", "the", " ", "cutoff",
         " ", "and", " ", "zeros", " ", 
        RowBox[{"otherwise", "."}]}]}], "  ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"snnmat", " ", "=", 
      RowBox[{"N", "[", 
       RowBox[{
        RowBox[{"BoolEval", "[", 
         RowBox[{"jaccardmat", ">", "cutoff"}], "]"}], "*", "nnmat"}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<SNN Matrix created\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"snngraph", "=", 
      RowBox[{"IGWeightedAdjacencyGraph", "[", "snnmat", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"pcs", ",", "snngraph"}], "}"}], ",", " ", "Module"}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", "\"\<Converted SNN Matrix into graph\>\"", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{
  3.8744394933087273`*^9, {3.874439655591793*^9, 3.874439663167007*^9}, {
   3.8744464893063602`*^9, 3.874446493175829*^9}, {3.874446595026226*^9, 
   3.8744465990714827`*^9}, {3.874600835092072*^9, 3.8746008431654778`*^9}, {
   3.87618700602607*^9, 3.876187008526*^9}, {3.877429533828918*^9, 
   3.8774295756735783`*^9}, {3.8791082214343777`*^9, 3.879108257679482*^9}, {
   3.879109452210388*^9, 3.87910974029349*^9}, {3.8791098068878593`*^9, 
   3.879109824319672*^9}, 3.8791098681049423`*^9, {3.879110066580353*^9, 
   3.8791100711772614`*^9}, {3.8791249717408*^9, 3.879125041006339*^9}, {
   3.8833981934640303`*^9, 3.883398199424799*^9}},
 Background->RGBColor[1, 1, 0],
 CellLabel->
  "In[178]:=",ExpressionUUID->"61ffe17f-4411-4c32-8eb2-03a96c85f852"]
}, Closed]],

Cell[CellGroupData[{

Cell["CoordinateAssociation", "Subsubsection",
 CellChangeTimes->{
  3.9064203055666857`*^9},ExpressionUUID->"e1df927a-a406-4092-983d-\
092d0db35462"],

Cell["\<\
This code uses the output of SNNGraph2 to generate a set of cluster \
assignments, using Leiden clustering, and based on a value of resolution that \
the user selects.  \
\>", "Text",
 CellChangeTimes->{{3.906421171552616*^9, 3.906421195022731*^9}, {
  3.90642134579819*^9, 
  3.906421349797987*^9}},ExpressionUUID->"4d966ed9-8623-419a-a131-\
57345821dc5b"],

Cell["\<\
This takes as arguments a matpac (specifically, the matpac from which the \
cell-specific residuals matrix was generated that was used as input to \
SNNGraph2), the output of SNNGraph2 (which is a list of two elements), and a \
resolution value (a user-defined parameter that controls how many clusters \
are found).

The default method for Dimensional Reduction is \[OpenCurlyDoubleQuote]UMAP\
\[CloseCurlyDoubleQuote], but there is an option to change that to other \
methods available to DimensionReduce, such as TSNE.  

Note that this code calls \[OpenCurlyDoubleQuote]IGCommunitiesLeiden\
\[CloseCurlyDoubleQuote] which is part of the IGraphM package.

The output is an association of cell IDs to Cartesian coordinates, grouped by \
identified clusters.  \
\>", "Text",
 CellChangeTimes->{{3.906421047021884*^9, 3.906421164448443*^9}, {
  3.906421200781509*^9, 
  3.906421394476438*^9}},ExpressionUUID->"46d6524e-7a4d-43ef-8ef5-\
99d04583e8be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "CoordinateAssociation", "]"}], " ", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<Method\>\"", "->", " ", "\"\<UMAP\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CoordinateAssociation", "[", 
   RowBox[{"matpac_", ",", " ", "snngraph_", ",", "resolution_", ",", " ", 
    RowBox[{"opt", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"reduction", ",", "message", ",", " ", "communities"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"communities", " ", "=", 
      RowBox[{
       RowBox[{"IGCommunitiesLeiden", "[", 
        RowBox[{
         RowBox[{"snngraph", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
         RowBox[{"\"\<Resolution\>\"", "->", " ", "resolution"}]}], "]"}], 
       "[", "\"\<Communities\>\"", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"reduction", " ", "=", " ", 
      RowBox[{"DimensionReduce", "[", 
       RowBox[{
        RowBox[{"snngraph", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", "2", ",", 
        RowBox[{"Method", "->", 
         RowBox[{"OptionValue", "[", "\"\<Method\>\"", "]"}]}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"matpac", "[", 
           RowBox[{"[", 
            RowBox[{"3", ",", 
             RowBox[{"communities", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "]"}], ")"}], "->", 
         " ", 
         RowBox[{"reduction", "[", 
          RowBox[{"[", 
           RowBox[{"communities", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "communities", "]"}]}], "}"}]}], "]"}]}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.8776392837446423`*^9, 3.877639313649447*^9}, {
  3.877649251537355*^9, 3.877649261546039*^9}, {3.8776493579830503`*^9, 
  3.877649410049583*^9}, {3.87764945915888*^9, 3.877649556994125*^9}, {
  3.879129112331991*^9, 3.8791291154003*^9}},
 Background->RGBColor[1, 1, 0],
 CellLabel->
  "In[185]:=",ExpressionUUID->"a1ef10b6-a9ab-4297-b85a-4f6d694f7c42"]
}, Closed]],

Cell[CellGroupData[{

Cell["PlotClustersFromCoords", "Subsubsection",
 CellChangeTimes->{{3.9064207626177597`*^9, 
  3.906420770091346*^9}},ExpressionUUID->"f09d6d70-7710-443d-8488-\
b64395feb399"],

Cell["\<\
This plots a UMAP plot from a coordinate association (see above)\
\>", "Text",
 CellChangeTimes->{{3.877442225898448*^9, 3.877442300658121*^9}, {
  3.8774425177422647`*^9, 3.877442541920114*^9}, {3.879433471882784*^9, 
  3.8794334798423767`*^9}, {3.9064207893860683`*^9, 3.9064208240677643`*^9}, {
  3.906421420652316*^9, 
  3.906421425565393*^9}},ExpressionUUID->"a7085009-a3d0-4e33-ae9f-\
12c2f09b3e7a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PlotClustersFromCoords", "]"}], " ", "=", " ", 
   RowBox[{"Options", "[", "ListPlot", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PlotClustersFromCoords", "[", 
   RowBox[{"coordinateassociation_", ",", " ", 
    RowBox[{"opt", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"Values", "/@", "coordinateassociation"}], ",", " ", 
    RowBox[{"PlotLegends", "->", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "coordinateassociation", "]"}], "]"}]}], ",", 
    " ", 
    RowBox[{"PlotStyle", "->", " ", 
     RowBox[{"PointSize", "[", "Medium", "]"}]}], ",", 
    RowBox[{"Axes", "->", " ", "None"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8744395101312437`*^9, 3.874439519590057*^9}, {
   3.87444650391824*^9, 3.874446515169697*^9}, {3.874452675828541*^9, 
   3.874452750444406*^9}, {3.87445278637919*^9, 3.874452835098545*^9}, {
   3.874453563089616*^9, 3.874453622858686*^9}, {3.8746008999253187`*^9, 
   3.874600908211635*^9}, 3.877436951505323*^9, {3.877436982447012*^9, 
   3.877436997936061*^9}, {3.877437559444826*^9, 3.8774375703223743`*^9}, {
   3.877437620966811*^9, 3.877437717924156*^9}, {3.87743783904172*^9, 
   3.8774379124068947`*^9}, {3.877441987619598*^9, 3.8774419899434443`*^9}, {
   3.877442020923634*^9, 3.8774420214905148`*^9}, {3.8774420543125467`*^9, 
   3.877442126538602*^9}, {3.877442433631068*^9, 3.8774424340621443`*^9}, {
   3.877442498575573*^9, 3.877442513040125*^9}, {3.877442724195861*^9, 
   3.877442725288864*^9}, {3.879433486758418*^9, 3.879433590942704*^9}, {
   3.8794336369393873`*^9, 3.879433639513616*^9}, {3.879434131196869*^9, 
   3.879434140559052*^9}, {3.879434186367641*^9, 3.879434187282531*^9}, {
   3.879434325360155*^9, 3.879434394902741*^9}, {3.879434427134056*^9, 
   3.879434432442856*^9}, {3.879434498403782*^9, 3.879434499560404*^9}, {
   3.8794345381878357`*^9, 3.879434539500216*^9}, {3.879604788223105*^9, 
   3.879604793993132*^9}},
 Background->RGBColor[1, 1, 0],
 CellLabel->
  "In[182]:=",ExpressionUUID->"0cef4333-f0ee-4057-8e3c-cc1fc5fbe521"]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{992, 860},
WindowMargins->{{Automatic, 326}, {Automatic, 0}},
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9e1d80e3-1d8f-4dcd-9d8d-a1562f79f3df"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 172, 3, 69, "Chapter",ExpressionUUID->"9794167f-21eb-475d-b132-4b57a02f97e2"],
Cell[CellGroupData[{
Cell[777, 29, 163, 3, 67, "Section",ExpressionUUID->"c430fcf9-2419-43d6-98a1-9b093af54ca1"],
Cell[CellGroupData[{
Cell[965, 36, 246, 4, 45, "Subsubsection",ExpressionUUID->"56148ecc-37b5-4f88-81c2-bc264f3c40a2"],
Cell[1214, 42, 1578, 27, 311, "Text",ExpressionUUID->"eee9da1c-6c70-47fb-be2f-b21649340eac"]
}, Closed]],
Cell[CellGroupData[{
Cell[2829, 74, 172, 3, 37, "Subsubsection",ExpressionUUID->"6f0a5443-c389-4f07-b583-e42ddc9f1609"],
Cell[3004, 79, 2317, 39, 426, "Text",ExpressionUUID->"8f015e31-2461-4101-9476-6a2786fc23c5"],
Cell[5324, 120, 2676, 67, 236, "Input",ExpressionUUID->"c83f71a0-d6ab-401d-9be9-c44efc88e8a3"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8049, 193, 157, 3, 67, "Section",ExpressionUUID->"bf78f765-73ef-4881-928e-ae6b729c539c"],
Cell[CellGroupData[{
Cell[8231, 200, 236, 4, 45, "Subsubsection",ExpressionUUID->"a836ff8b-c976-4b33-ae1d-9ddb0b98cf47"],
Cell[8470, 206, 2100, 38, 472, "Text",ExpressionUUID->"81bc3d91-513a-4527-99e2-c0308f1d24d4"],
Cell[10573, 246, 5822, 132, 719, "Input",ExpressionUUID->"61ffe17f-4411-4c32-8eb2-03a96c85f852"]
}, Closed]],
Cell[CellGroupData[{
Cell[16432, 383, 150, 3, 37, "Subsubsection",ExpressionUUID->"e1df927a-a406-4092-983d-092d0db35462"],
Cell[16585, 388, 367, 8, 58, "Text",ExpressionUUID->"4d966ed9-8623-419a-a131-57345821dc5b"],
Cell[16955, 398, 960, 20, 242, "Text",ExpressionUUID->"46d6524e-7a4d-43ef-8ef5-99d04583e8be"],
Cell[17918, 420, 2363, 60, 152, "Input",ExpressionUUID->"a1ef10b6-a9ab-4297-b85a-4f6d694f7c42"]
}, Closed]],
Cell[CellGroupData[{
Cell[20318, 485, 175, 3, 37, "Subsubsection",ExpressionUUID->"f09d6d70-7710-443d-8488-b64395feb399"],
Cell[20496, 490, 415, 8, 35, "Text",ExpressionUUID->"a7085009-a3d0-4e33-ae9f-12c2f09b3e7a"],
Cell[20914, 500, 2207, 42, 110, "Input",ExpressionUUID->"0cef4333-f0ee-4057-8e3c-cc1fc5fbe521"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

